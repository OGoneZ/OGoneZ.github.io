<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>01_Python基础语法</title>
    <link href="/2025/10/26/01%20Python%E5%9F%BA%E7%A1%80/01_Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <url>/2025/10/26/01%20Python%E5%9F%BA%E7%A1%80/01_Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="1-注释"><a href="#1-注释" class="headerlink" title="1 注释"></a>1 注释</h1><ul><li>单行注释</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 单行注释</span><br></code></pre></td></tr></table></figure><ul><li>多行注释</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">多行注释</span><br><span class="hljs-string">多行注释</span><br><span class="hljs-string">多行注释</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>Python不区分单双引号，都可以。</p></blockquote><h1 id="2-变量"><a href="#2-变量" class="headerlink" title="2 变量"></a>2 变量</h1><p>Python的变量与C++不同，<strong>变量本身没有类型</strong>，但存储的数据本身是有类型的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&#x27;哈哈哈&#x27;</span><br>name = <span class="hljs-number">666</span><br><span class="hljs-built_in">print</span>(name)  <span class="hljs-comment"># name 内的值变成了666</span><br></code></pre></td></tr></table></figure><blockquote><p>这种变量本身类型不固定的语言称之为<strong>动态语言</strong>，与之对应的是<strong>静态语言</strong>。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错，例如Java和C++。</p></blockquote><p>Python变量一般不使用驼峰命名法，而是使用<strong>全小写加下划线</strong>。<br>变量命名规则：</p><ol><li>字母、数字、下划线组成</li><li>不能以数字开头</li><li>区分大小写</li><li>不能使用关键字</li></ol><p>Python中可以把任何数据都看成一个“对象”，而变量就是在程序中用来<strong>指向这些数据对象</strong>的，对变量赋值就是把数据和变量给关联起来。</p><p>Python解释器在执行 <code>a = 10</code>赋值时做以下操作：</p><ol><li>创建变量 a</li><li>创建一个对象(分配一块内存)，来存储值10</li><li>将变量与对象，通过指针连接起来，从变量到对象的连接称之为引用(变量引用对象)</li></ol><p><img src="/assets/Pasted%20image%2020250909101046.png"></p><h1 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3 数据类型"></a>3 数据类型</h1><p><img src="/assets/Pasted%20image%2020250831105835.png"></p><p>可以使用 <code>type()</code>查看变量内存储的是什么类型。</p><p>数据类型转换：</p><ul><li><code>int()</code>转换为整数</li><li><code>float()</code>转换为浮点数</li><li><code>str()</code>转换为字符串</li><li><code>bool</code>转化为布尔</li><li><code>list()</code>转换为列表</li><li>…</li></ul><p>字符处理相关：</p><ul><li><code>ord()</code>获取字符的整数表示</li><li><code>chr()</code>把编码转换为对应的字符</li></ul><h1 id="4-运算符"><a href="#4-运算符" class="headerlink" title="4 运算符"></a>4 运算符</h1><p><strong>算术运算符</strong></p><ul><li><code>+</code> 加法</li><li><code>-</code> 减法</li><li><code>*</code> 乘法</li><li><code>/</code> 除法</li><li><code>//</code> 整除</li><li><code>%</code> 取余</li><li><code>**</code> 乘方</li></ul><p><strong>赋值运算符</strong></p><ul><li><code>=</code> 将右侧结果赋予左侧变量</li></ul><p><strong>复合赋值运算符</strong></p><ul><li><code>a?=b</code> 相当于：<code>a = a?b</code> ，这个 <code>?</code> 可以是任何的算术运算符</li></ul><p><strong>比较运算符</strong></p><ul><li><code>==</code> 相等</li><li><code>!=</code> 不相等</li><li><code>&gt;</code> 大于</li><li><code>&lt;</code> 小于</li><li><code>&gt;=</code> 大于等于</li><li><code>&lt;=</code> 小于等于</li></ul><p><strong>逻辑运算符</strong></p><ul><li><code>and</code> 全真为真</li><li><code>or</code> 全假为假</li><li><code>not</code> 取反</li></ul><h1 id="5-输入输出"><a href="#5-输入输出" class="headerlink" title="5 输入输出"></a>5 输入输出</h1><h2 id="5-1-print输出"><a href="#5-1-print输出" class="headerlink" title="5.1 print输出"></a>5.1 print输出</h2><p><code>print()</code> 语句（函数）可以向屏幕内一次性输出多份内容，语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 默认以空格分隔，内容可以是：字面量、变量、表达式。</span><br><span class="hljs-built_in">print</span>(内容<span class="hljs-number">1</span>, 内容<span class="hljs-number">2</span>, ... ,..., 内容N)<br><br><span class="hljs-comment"># 默认以回车结束，可以使用end设置</span><br><span class="hljs-built_in">print</span>(内容, end = <span class="hljs-string">&#x27; &#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>格式化输出：</strong><br>两种方法变量的位置都可以填写表达式，Python会先计算再填入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 方法一：使用占位符</span><br><span class="hljs-string">&quot;名字：%s&quot;</span> % name<br><span class="hljs-string">&quot;名字：%s 年龄：%d 分数：%.2f&quot;</span> % (name, age, score)<br><br>%md %mf   限制m位宽度（小数点也算一位）<br>%.nf      保留n位小数 <br>%m.nf     限制m位宽度，并保留n位小数<br><br><span class="hljs-comment"># 想要打出 %，可以使用%%</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%.2f%%&quot;</span> % <span class="hljs-number">82.5</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 方法二：f-string格式化，默认不理会类型，也不做精度控制</span><br><span class="hljs-string">f&quot;名字：<span class="hljs-subst">&#123;name&#125;</span> 年龄：<span class="hljs-subst">&#123;age&#125;</span> 分数：<span class="hljs-subst">&#123;score&#125;</span>&quot;</span><br><br><span class="hljs-comment"># 这种方式也可以控制精度</span><br><span class="hljs-string">f&quot;<span class="hljs-subst">&#123;变量:m.n f | d&#125;</span>&quot;</span><br><span class="hljs-string">f&quot;分数<span class="hljs-subst">&#123;score:<span class="hljs-number">.2</span>f&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><h2 id="5-2-input输入"><a href="#5-2-input输入" class="headerlink" title="5.2 input输入"></a>5.2 input输入</h2><p><code>input()</code> 可以获取用户的键盘录入数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-built_in">input</span>()  <span class="hljs-comment"># 从键盘输入内容，赋值给name变量  </span><br>name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入姓名：&quot;</span>)  <span class="hljs-comment"># 输入前会输出指定的提示</span><br></code></pre></td></tr></table></figure><p>注意：<code>input</code> 输入的内容会自动转换为<strong>字符串</strong>类型，如果需要输入数字类型，要自行转换类型。</p><p><strong>在同一行输入多个内容：</strong><br><code>map()</code> 的作用是：将一个函数应用到可迭代对象（如列表、元组等）的每一个元素上，并返回一个包含所有结果的迭代器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 原理：input()输入进来是字符串，split()默认按照空格分割，返回一个字符串列表</span><br><span class="hljs-comment"># map将int()函数应用到列表里的每一个元素，返回一个迭代器，可以使用变量分别接收</span><br>n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br><br>name, pwd = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, <span class="hljs-built_in">input</span>().split())<br></code></pre></td></tr></table></figure><p><strong>一行内输入列表：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 将map返回的迭代器转换为列表</span><br>ls = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br></code></pre></td></tr></table></figure><p><strong>连续输入多行数据：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 方法一：逐行读取</span><br>n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())  <br>mp = []  <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):  <br>    row = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))  <br>    mp.append(row)<br><br><span class="hljs-comment"># 特殊的字符矩阵</span><br>n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>mp = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>row = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">input</span>().strip())  <span class="hljs-comment"># 将输入的字符串处理空行换行之后转为列表</span><br>mp.append(row)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 方法二：列表推导式</span><br>n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())  <br>mp = [<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br><br><span class="hljs-comment"># 将表达式按照特定条件依次放到列表中</span><br>ls = [i + <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]  <br><br><span class="hljs-comment"># 等价于以下循环</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>ls.append(i + <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 有条件的列表推导式</span><br>ls = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>]  <span class="hljs-comment"># 生成0~99的偶数列表</span><br><br><span class="hljs-comment"># 多重循环的列表推导式</span><br>ls = [(x, y) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>) <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)]<br></code></pre></td></tr></table></figure><h1 id="6-分支语句"><a href="#6-分支语句" class="headerlink" title="6 分支语句"></a>6 分支语句</h1><h2 id="6-1-if-elif-else"><a href="#6-1-if-elif-else" class="headerlink" title="6.1 if-elif-else"></a>6.1 if-elif-else</h2><p><code>else if</code> 可以简写为 <code>elif</code>。<br>特殊地，Python不同于C++，<code>a &gt; 1 and a &lt; 100</code>可以简写为 <code>1 &lt; a &lt; 100</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> 判断条件<span class="hljs-number">1</span>:<br>代码块<span class="hljs-number">1</span><br><span class="hljs-keyword">elif</span> 判断条件<span class="hljs-number">2</span>:<br>代码块<span class="hljs-number">2</span><br><span class="hljs-keyword">elif</span> 判断条件<span class="hljs-number">3</span>:<br>代码块<span class="hljs-number">3</span><br><span class="hljs-keyword">else</span>:<br>代码块<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><blockquote><p>Python通过缩进区分代码块，缩进需要严格准确。缩进可以使用任意数量的空格，但<strong>通常使用4个空格</strong>，Python对缩进极其依赖，<strong>不要使用制表键（Tab键）来缩进代码</strong>，可以在编辑器中设置Tab为4个空格。</p></blockquote><p>Python中为了简化 <code>if-else</code>结构，也引入了三元运算符，结构如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">真值结果 <span class="hljs-keyword">if</span> 条件 <span class="hljs-keyword">else</span> 假值结果<br>num = <span class="hljs-number">10</span><br>res = <span class="hljs-string">&#x27;偶数&#x27;</span> <span class="hljs-keyword">if</span> num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;奇数&#x27;</span><br><span class="hljs-built_in">print</span>(res)  <span class="hljs-comment"># 偶数</span><br></code></pre></td></tr></table></figure><h2 id="6-2-match-case"><a href="#6-2-match-case" class="headerlink" title="6.2 match-case"></a>6.2 match-case</h2><p>类似C++的 <code>switch-case</code>，但有所差别，不像C++遇到 <code>break</code>才停止，而是只执行匹配条件的代码块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">alp = <span class="hljs-string">&#x27;a&#x27;</span>  <br>  <br><span class="hljs-keyword">match</span> alp:  <br>    <span class="hljs-keyword">case</span> x <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;a&#x27;</span> &lt;= x &lt;= <span class="hljs-string">&#x27;z&#x27;</span>:  <span class="hljs-comment"># 使用条件，并且返回匹配值</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;小写字母<span class="hljs-subst">&#123;x&#125;</span>&#x27;</span>)  <br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;A&#x27;</span>:  <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;大写A&#x27;</span>)  <br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;B&#x27;</span> | <span class="hljs-string">&#x27;C&#x27;</span> | <span class="hljs-string">&#x27;D&#x27;</span>:  <span class="hljs-comment"># 多个匹配值</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;大写B C D&#x27;</span>)  <br>    <span class="hljs-keyword">case</span> _:  <span class="hljs-comment"># _ 代表其他情况，类似C++的default</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;其他情况&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="7-循环语句"><a href="#7-循环语句" class="headerlink" title="7 循环语句"></a>7 循环语句</h1><h2 id="7-1-while循环"><a href="#7-1-while循环" class="headerlink" title="7.1 while循环"></a>7.1 while循环</h2><p>与C++不同的是，Python有独特的 <code>循环-else</code>结构：</p><ul><li><code>else</code> 子句只在循环正常完成时执行</li><li>如果循环被 <code>break</code> 中断，<code>else</code> 部分不会执行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 条件:<br>代码块<br><span class="hljs-keyword">else</span>:<br>代码块<br></code></pre></td></tr></table></figure><h2 id="7-2-for循环"><a href="#7-2-for循环" class="headerlink" title="7.2 for循环"></a>7.2 for循环</h2><p><code>for</code>循环与C++有所不同，从待处理数据集中，挨个取出内容，将其赋给临时变量，然后执行循环语句，循环往复。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> 临时变量 <span class="hljs-keyword">in</span> 待处理数据集:<br>代码块<br><span class="hljs-keyword">else</span>:<br>代码块<br></code></pre></td></tr></table></figure><p><code>for</code>循环这种遍历方式叫做<strong>迭代（Iteration）</strong>，上述语法的待处理数据集，本质上应当是：<strong>可迭代对象</strong>，可以使用 <code>isinstance</code>方法判断是否为可迭代对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Iterable<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(<span class="hljs-string">&#x27;abc&#x27;</span>, Iterable))  <span class="hljs-comment"># True，字符串可迭代</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(<span class="hljs-number">123</span>, Iterable))  <span class="hljs-comment"># False，整数不可迭代</span><br></code></pre></td></tr></table></figure><p>可迭代对象（类型）：<strong>其内容可以一个个依次取出的一种类型</strong>，包括：</p><ul><li>集合数据类型<ul><li>字符串</li><li>列表</li><li>元组</li><li>字典</li><li>集合</li></ul></li><li>生成器<ul><li>生成器表达式</li><li>生成器函数</li></ul></li><li><code>range</code>序列</li></ul><p>和C++相同，Python可以使用 <code>continue</code>跳过本轮循环，使用 <code>break</code>中断整个循环。</p><blockquote><p>在Python中，变量作用域有些特殊，在for循环的外部访问临时变量，<strong>实际上可以访问到，但在编程规范上不建议这样做。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br><span class="hljs-keyword">continue</span><br><span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><p>在规范中，Python通过 <code>:</code>和缩进控制作用域，实现C++中 <code>&#123;&#125;</code>的作用。</p></blockquote><hr><p><code>range()</code>可以生成数字序列，生成的数字序列是<strong>可迭代对象</strong>，与列表类似，但不是列表类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 生成从0开始，到num结束（但不包括num），也就是 [0, num)</span><br><span class="hljs-built_in">range</span>(num) <br><br><span class="hljs-comment"># 从num1开始，到num2结束（不包括num2），为[num1, num2)</span><br><span class="hljs-built_in">range</span>(num1, num2)<br><br><span class="hljs-comment"># 和上一个范围一样，但步长由step决定</span><br><span class="hljs-built_in">range</span>(num1, num2, step)<br></code></pre></td></tr></table></figure><p><code>range()</code>可以和 <code>for</code>循环进行搭配，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br><span class="hljs-built_in">print</span>(i)<br><br><span class="hljs-comment"># 等价于以下C++代码</span><br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>cout &lt;&lt; i &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>另外Python还可以使用 <code>zip</code>将多个可迭代对象放在一个循环内进行迭代。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">x = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>y = [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>]<br><br><span class="hljs-keyword">for</span> i, j <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(x, y):<br>    <span class="hljs-built_in">print</span>(i, j)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">1 10</span><br><span class="hljs-string">2 11</span><br><span class="hljs-string">3 12</span><br><span class="hljs-string">4 13</span><br><span class="hljs-string">5 14</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="8-函数"><a href="#8-函数" class="headerlink" title="8 函数"></a>8 函数</h1><h2 id="8-1-语法格式"><a href="#8-1-语法格式" class="headerlink" title="8.1 语法格式"></a>8.1 语法格式</h2><p>参数和返回值可以省略，函数必须先定义再调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">函数名</span>(<span class="hljs-params">[形参<span class="hljs-number">1</span>, 形参<span class="hljs-number">2.</span>..]</span>):<br>函数内容<br>[<span class="hljs-keyword">return</span> 返回值]<br><span class="hljs-comment"># Python PEP8规范：函数定义的前后分别空两行</span><br><br><span class="hljs-comment"># 调用函数</span><br>函数名([实参<span class="hljs-number">1</span>, 实参<span class="hljs-number">2.</span>..])<br></code></pre></td></tr></table></figure><p>实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b, c</span>):<br><span class="hljs-keyword">return</span> a + b + c<br><br><span class="hljs-built_in">sum</span> = add(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br><br><span class="hljs-comment"># 形参和实参一一对应，与C++不同的是，实参的传入类型不受限制。</span><br>add(<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>)<br></code></pre></td></tr></table></figure><p>在Python中函数可以有多个返回值，并且可以是不同类型，按照返回值顺序，用多个变量接收即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>():<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-number">18</span>   <span class="hljs-comment"># 本质是返回了一个元组 (&quot;zhangsan&quot;, 18)</span><br><br>name, age = test()          <span class="hljs-comment"># 等同于 name, age = (&quot;zhangsan&quot;, 18)</span><br></code></pre></td></tr></table></figure><p>Python是动态强类型语言，函数中可以显式声明接收的数据类型，但是没有实际作用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 规定num接收int类型</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">num: <span class="hljs-built_in">int</span></span>):<br>    <span class="hljs-keyword">return</span> num<br><br><br><span class="hljs-built_in">print</span>(func(<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(func(<span class="hljs-string">&#x27;哈哈哈&#x27;</span>))  <span class="hljs-comment"># 甚至可以传字符串</span><br></code></pre></td></tr></table></figure><h3 id="8-1-1-位置参数"><a href="#8-1-1-位置参数" class="headerlink" title="8.1.1 位置参数"></a>8.1.1 位置参数</h3><p>就是C++最普通的函数传值方式， 传递的参数和定义的参数<strong>一一对应</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">x, y, z</span>):<br>...<br><br><br>func(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)   <span class="hljs-comment"># 数量一致，顺序一致，一一对应</span><br></code></pre></td></tr></table></figure><h3 id="8-1-2-关键字参数"><a href="#8-1-2-关键字参数" class="headerlink" title="8.1.2 关键字参数"></a>8.1.2 关键字参数</h3><p>通过<strong>键值对形式</strong>显式指明形参的名称，由于会自动匹配，所以可以不按照顺序进行传入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">x, y, z</span>):<br>...<br><br><br>func(x=<span class="hljs-number">1</span>, z=<span class="hljs-number">2</span>, y=<span class="hljs-number">3</span>)<br><br><span class="hljs-comment"># 和位置参数混用的时候，关键字传参必须在位置参数的后面，否则无法对应</span><br>func(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, z=<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><h3 id="8-1-3-默认参数"><a href="#8-1-3-默认参数" class="headerlink" title="8.1.3 默认参数"></a>8.1.3 默认参数</h3><p>默认参数也叫缺省参数，在定义函数时<strong>提供默认值</strong>，调用该函数时如果不传该参数则使用默认参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 注意有默认值的参数要在无默认值参数的右边</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">name, age=<span class="hljs-number">18</span></span>):<br>...<br><br><br>func(<span class="hljs-string">&quot;zhangsan&quot;</span>)<br>func(<span class="hljs-string">&quot;lisi&quot;</span>, <span class="hljs-number">25</span>)<br></code></pre></td></tr></table></figure><blockquote><p>注意：缺省参数必须指向不可变对象！因为可变对象在函数内部可能会被修改，而导致和默认值不同。</p></blockquote><h3 id="8-1-4-不定长参数"><a href="#8-1-4-不定长参数" class="headerlink" title="8.1.4 不定长参数"></a>8.1.4 不定长参数</h3><p>不定长参数也叫可变参数，用于在调用时<strong>参数数量不确定</strong>，可以使用元组接收或字典接收。</p><ul><li>使用元组接收：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 可以传入元组或列表，但args都接收为元组类型，在函数内不可变</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">x, y, *args</span>):<br>...<br><br><br><span class="hljs-comment"># x接收1，y接收2，z是一个元组，接收3, 4, 5, 6</span><br>func(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>)<br><br><span class="hljs-comment"># 已经有现成元组或列表，传入时可以加上 * 变成不定长参数</span><br>ls = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>func(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, *ls)  <span class="hljs-comment"># x接收1，y接收2，args接收列表内的元素</span><br></code></pre></td></tr></table></figure><ul><li>使用字典接收：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">x, y, **kwargs</span>):<br>...<br><br><br><span class="hljs-comment"># x接收1，y接收2，z是一个字典，内部有三个键值对</span><br>func(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>, name=<span class="hljs-string">&#x27;lisi&#x27;</span>, age=<span class="hljs-number">18</span>)<br><br><span class="hljs-comment"># 已经有现成字典，传入时可以加上 ** 变成不定长参数</span><br>d = &#123;name: <span class="hljs-string">&#x27;zhangsan&#x27;</span>, age: <span class="hljs-number">18</span>&#125;<br>func(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, **d)  <span class="hljs-comment"># x接收1，y接收2，kwargs接收字典内的元素</span><br><br><span class="hljs-comment"># kwargs只是d的拷贝，在函数内修改kwargs不会影响d的内容</span><br></code></pre></td></tr></table></figure><h2 id="8-2-None"><a href="#8-2-None" class="headerlink" title="8.2 None"></a>8.2 None</h2><p>在Python中有一个数据类型：<code>NoneType</code> ，它只有一个字面量：<code>None</code>，并且不可变。<br>函数如果没有写 <code>return</code>，则默认返回值是 <code>None</code>，或者也可以显式写 <code>return None</code>。</p><p>作用：</p><ul><li>用在 <code>if</code> 判断中， <code>None</code> 等同于 <code>False</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">score</span>):<br><span class="hljs-keyword">if</span> score &gt;= <span class="hljs-number">60</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;good&#x27;</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>  <span class="hljs-comment"># 本行也可以省略</span><br><br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> check(<span class="hljs-number">59</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;不及格&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>用在变量声明时，暂不需要初始值可以使用 <code>None</code> 代替</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">age = <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>  age = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><br><span class="hljs-comment"># 为了避免作用域问题，age需要在for循环外部定义</span><br><span class="hljs-comment"># for循环外定义的时候，不需要初始值，可以以None代替</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;最后一个同学的年龄是：%d &quot;</span> % age)<br></code></pre></td></tr></table></figure><ul><li>用于函数无返回值时</li></ul><h2 id="8-3-函数规范注释"><a href="#8-3-函数规范注释" class="headerlink" title="8.3 函数规范注释"></a>8.3 函数规范注释</h2><p>使用多行注释，在函数体之前为函数进行说明解释，在Pycharm中调用函数时通过鼠标悬停可以显示函数的说明文档。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">函数名</span>(<span class="hljs-params">参数</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    函数说明文本</span><br><span class="hljs-string">    :param 参数1: 参数1的说明</span><br><span class="hljs-string">    :param 参数2: 参数2的说明</span><br><span class="hljs-string">    :return: 返回值的说明</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    函数体<br>    <span class="hljs-keyword">return</span> ...<br></code></pre></td></tr></table></figure><h2 id="8-4-变量作用域"><a href="#8-4-变量作用域" class="headerlink" title="8.4 变量作用域"></a>8.4 变量作用域</h2><p>局部变量：写在函数内部的是局部变量，其作用范围只在函数内部有效。<br>全局变量：写在函数外部的是全局变量，其作用范围在函数内外都生效。</p><p><code>global</code>关键字：可以<strong>在函数内部将局部变量声明为全局变量</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">10</span>  <br>  <br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>():  <br>    <span class="hljs-keyword">global</span> a  <br>    a = <span class="hljs-number">100</span>  <span class="hljs-comment"># 使用global声明后，可以在函数内部修改全局变量</span><br>  <br>  <br>fun()  <br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 输出为100</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02_Python数据容器</title>
    <link href="/2025/10/26/01%20Python%E5%9F%BA%E7%A1%80/02_Python%E6%95%B0%E6%8D%AE%E5%AE%B9%E5%99%A8/"/>
    <url>/2025/10/26/01%20Python%E5%9F%BA%E7%A1%80/02_Python%E6%95%B0%E6%8D%AE%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1-列表-list"><a href="#1-列表-list" class="headerlink" title="1 列表(list)"></a>1 列表(list)</h1><h2 id="1-1-列表的创建与访问"><a href="#1-1-列表的创建与访问" class="headerlink" title="1.1 列表的创建与访问"></a>1.1 列表的创建与访问</h2><p>列表类似C++的数组，不过列表中的数据可以为<strong>不同的数据类型</strong>，并且可以嵌套，嵌套时类似C++的多维数组。<br>列表定义用 <code>[]</code>包围，以 <code>,</code>分割，正向下标从0开始，有<strong>反向索引</strong>，从-1开始，从后往前，依次递减。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">ls = []   <span class="hljs-comment"># 空列表</span><br><br>demo_list = [<span class="hljs-number">11</span>, <span class="hljs-string">&#x27;哈哈&#x27;</span>, <span class="hljs-number">3.14</span>, [<span class="hljs-number">1</span>, -<span class="hljs-number">2</span>]]<br><span class="hljs-comment"># 正向索引    0      1     2       3 </span><br><span class="hljs-comment"># 反向索引   -4     -3    -2      -1</span><br><br>demo[<span class="hljs-number">1</span>]  <span class="hljs-comment"># 得到 &#x27;哈哈&#x27;</span><br>demo[-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]  <span class="hljs-comment"># 得到 1</span><br></code></pre></td></tr></table></figure><p>列表可以使用 <code>+</code>拼接或使用 <code>*</code>实现重复计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">ls1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>] * <span class="hljs-number">2</span><br>ls2 = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><br><span class="hljs-built_in">print</span>(ls1)  <span class="hljs-comment"># [1, 2, 1, 2]</span><br><span class="hljs-built_in">print</span>(ls1 + ls2)  <span class="hljs-comment"># [1, 2, 1, 2, 3, 4]</span><br></code></pre></td></tr></table></figure><h2 id="1-2-列表生成式"><a href="#1-2-列表生成式" class="headerlink" title="1.2 列表生成式"></a>1.2 列表生成式</h2><p>列表生成式的效率很高，<strong>强烈建议使用列表生成式来创建列表</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">要生成的元素 循环 过滤条件<br><br><span class="hljs-comment"># 将表达式按照特定条件依次放到列表中，生成了1~10</span><br>ls = [i + <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]  <br><br><span class="hljs-comment"># 等价于以下循环</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>ls.append(i + <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 有条件的列表推导式</span><br>ls = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>]  <span class="hljs-comment"># 生成0~99的偶数列表</span><br><br><span class="hljs-comment"># 多重循环的列表推导式</span><br>ls = [(x, y) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>) <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)] <span class="hljs-comment"># 生成x，y坐标</span><br></code></pre></td></tr></table></figure><blockquote><p>推导式可以用来生成列表、集合、字典。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">dic1 = &#123;<span class="hljs-string">&#x27;zhangsan&#x27;</span>: <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;lisi&#x27;</span>: <span class="hljs-number">22</span>, <span class="hljs-string">&#x27;wangwu&#x27;</span>: <span class="hljs-number">15</span>, <span class="hljs-string">&#x27;zhaoliu&#x27;</span>: <span class="hljs-number">16</span>&#125;  <br><br><span class="hljs-comment"># 生成字典</span><br>dic2 = &#123;k: v <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> dic1.items() <span class="hljs-keyword">if</span> v &gt;= <span class="hljs-number">18</span>&#125;  <span class="hljs-comment"># 过滤大于18岁的人</span><br><br><span class="hljs-comment"># 生成集合</span><br>st1 = &#123;k <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> dic1.keys() <span class="hljs-keyword">if</span> dic1[k] &gt;= <span class="hljs-number">18</span>&#125;  <br></code></pre></td></tr></table></figure><h2 id="1-3-列表的遍历"><a href="#1-3-列表的遍历" class="headerlink" title="1.3 列表的遍历"></a>1.3 列表的遍历</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># while方式</span><br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(my_list):<br><span class="hljs-built_in">print</span>(my_list[i])<br>i++<br><br><span class="hljs-comment"># for方式</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> my_list:<br><span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><h2 id="1-4-常用方法"><a href="#1-4-常用方法" class="headerlink" title="1.4 常用方法"></a>1.4 常用方法</h2><p><img src="/assets/Pasted%20image%2020250904170517.png"></p><h1 id="2-元组-tuple"><a href="#2-元组-tuple" class="headerlink" title="2 元组(tuple)"></a>2 元组(tuple)</h1><h2 id="2-1-元组的创建与访问"><a href="#2-1-元组的创建与访问" class="headerlink" title="2.1 元组的创建与访问"></a>2.1 元组的创建与访问</h2><p>元组与列表类似，不同之处在于元组的元素<strong>不能修改</strong>，元组使用 <code>()</code>，列表使用 <code>[]</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">tp = ()    <span class="hljs-comment"># 空元组</span><br><br>nums = (<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>)<br><br><span class="hljs-comment"># 元组内只有一个元素时，需要有逗号在内，否则小括号会识别为运算符</span><br>nums = (<span class="hljs-number">1</span>,)  √<br>nums = (<span class="hljs-number">1</span>)   ×<br><br><span class="hljs-comment"># 元组的访问和列表完全一样，通过下标访问，支持反向下标</span><br>nums[<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><h2 id="2-2-元组的“可变”"><a href="#2-2-元组的“可变”" class="headerlink" title="2.2 元组的“可变”"></a>2.2 元组的“可变”</h2><p>元组内有 <code>list</code>的时候，元组依然遵循元素不可变，但 <code>list</code>内的元素可以修改。这是因为元组存储的时候本质上存的是 <code>list</code>的地址，只要地址不变，元组元素就没有修改，而所指内容是否变化和元组无关。正因为如此，替换为别的 <code>list</code>也是不被允许的，因为地址发生了改变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">nums = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>nums = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, 地址)<br></code></pre></td></tr></table></figure><p><img src="/assets/Pasted%20image%2020250909114917.png"></p><h2 id="2-3-打包和解包"><a href="#2-3-打包和解包" class="headerlink" title="2.3 打包和解包"></a>2.3 打包和解包</h2><p>当我们把多个用逗号分隔的值赋给一个变量时，多个值会打包成一个元组类型；当我们把一个元组赋值给多个变量时，元组会解包成多个值然后分别赋给对应的变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 打包操作</span><br>a = <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))  <span class="hljs-comment"># &lt;class &#x27;tuple&#x27;&gt;</span><br><br><span class="hljs-comment"># 解包操作</span><br>i, j, k = a<br><span class="hljs-built_in">print</span>(i, j, k)  <span class="hljs-comment"># 1 10 100</span><br></code></pre></td></tr></table></figure><blockquote><p>解包操作对所有序列的成立，包括列表、元组、字符串、<code>range</code>都可以使用解包操作。</p></blockquote><p>解包时元素个数和变量个数不匹配会引发 <code>ValueError</code>异常，不过我们可以使用星号表达式解决变量少于元素个数的情况，让一个变量接收多个值。</p><ol><li>星号修饰的变量会变成一个列表，可以存放0个或多个元素</li><li>解包语法中，只能有一个型号表达式</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">ls = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]  <br><br><span class="hljs-comment"># 可以改变型号表达式的位置，会自动匹配</span><br>i, j, *k = ls  <br><span class="hljs-built_in">print</span>(i, j, k)  <span class="hljs-comment"># 1 2 [3, 4, 5, 6]</span><br>  <br>*i, j, k = ls  <br><span class="hljs-built_in">print</span>(i, j, k)  <span class="hljs-comment"># [1, 2, 3, 4] 5 6</span><br></code></pre></td></tr></table></figure><blockquote><p><code>a, b = b, a</code>和 <code>a, b, c = b, c, a</code>实际并没有用到打包解包语法，而是有特定的字节码指令实现这两个操作，效率非常高，在三个以上的变量交换时需要使用打包解包。</p></blockquote><h2 id="2-4-常用方法"><a href="#2-4-常用方法" class="headerlink" title="2.4 常用方法"></a>2.4 常用方法</h2><p><img src="/assets/Pasted%20image%2020250831194646.png"></p><h1 id="3-字符串-str"><a href="#3-字符串-str" class="headerlink" title="3 字符串(str)"></a>3 字符串(str)</h1><h2 id="3-1-字符串的创建和访问"><a href="#3-1-字符串的创建和访问" class="headerlink" title="3.1 字符串的创建和访问"></a>3.1 字符串的创建和访问</h2><p>字符串同列表、元组一样，可以通过下标和反向下标进行访问。不过和C++非常不同的一点是，字符串是<strong>无法修改</strong>的容器。也就是说如果要完成修改操作，只能得到一个新的字符串，旧的字符串是无法修改的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 字符串可以使用单引号、双引号、三引号进行定义，使用三引号时可以跨行。</span><br><br>s = <span class="hljs-string">&quot;&quot;</span>   <span class="hljs-comment"># 空字符串</span><br><br>s = <span class="hljs-string">&#x27;hhh&#x27;</span><br>s = <span class="hljs-string">&quot;hhh&quot;</span><br>s = <span class="hljs-string">&quot;&quot;&quot;hhh</span><br><span class="hljs-string">hhhh</span><br><span class="hljs-string">hh</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># 单引号里面可以包双引号，双引号里面可以包单引号</span><br>s = <span class="hljs-string">&quot;人工&#x27;智&#x27;能&quot;</span><br>s = <span class="hljs-string">&#x27;人工&quot;智&quot;能&#x27;</span><br><br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><ul><li>字符串内部使用 <code>\</code>进行转义，比如 <code>\n</code>换行、<code>\t</code>缩进，又或者转义 <code>\ &#39; &quot;</code>这些特殊字符</li><li>Python中以 <code>r</code>或 <code>R</code>开头的字符串叫做原始字符串，字符串内都是本来的含义，没有所谓转义字符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 很多字符需要转义需要很多\，可以使用r&#x27;&#x27;或R&#x27;&#x27;表示内部字符串默认不转义</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\\\t\\&#x27;</span>)  <span class="hljs-comment"># \\</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">r&#x27;\\\t\\&#x27;</span>) <span class="hljs-comment"># \\\t\\</span><br></code></pre></td></tr></table></figure><h2 id="3-2-字符串的运算"><a href="#3-2-字符串的运算" class="headerlink" title="3.2 字符串的运算"></a>3.2 字符串的运算</h2><ul><li>字符串比较时按照字典序从前往后，只要其中一位大，后面就不用比较了</li><li>可以使用 <code>+</code>进行拼接，还可以使用 <code>*</code>将字符串重复</li></ul><h2 id="3-3-字符串的格式化"><a href="#3-3-字符串的格式化" class="headerlink" title="3.3 字符串的格式化"></a>3.3 字符串的格式化</h2><p>两种方法变量的位置都可以填写表达式，Python会先计算再填入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 方法一：使用占位符</span><br><span class="hljs-string">&quot;名字：%s&quot;</span> % name<br><span class="hljs-string">&quot;名字：%s 年龄：%d 分数：%.2f&quot;</span> % (name, age, score)<br><br>%md %mf   限制m位宽度（小数点也算一位）<br>%.nf      保留n位小数 <br>%m.nf     限制m位宽度，并保留n位小数<br><br><span class="hljs-comment"># 想要打出 %，可以使用%%</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%.2f%%&quot;</span> % <span class="hljs-number">82.5</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 方法二：f-string格式化，默认不理会类型，也不做精度控制</span><br><span class="hljs-string">f&quot;名字：<span class="hljs-subst">&#123;name&#125;</span> 年龄：<span class="hljs-subst">&#123;age&#125;</span> 分数：<span class="hljs-subst">&#123;score&#125;</span>&quot;</span><br><br><span class="hljs-comment"># 这种方式也可以控制精度</span><br><span class="hljs-string">f&quot;<span class="hljs-subst">&#123;变量:m.n f | d&#125;</span>&quot;</span><br><span class="hljs-string">f&quot;分数<span class="hljs-subst">&#123;score:<span class="hljs-number">.2</span>f&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><h2 id="3-4-常用方法"><a href="#3-4-常用方法" class="headerlink" title="3.4 常用方法"></a>3.4 常用方法</h2><p>由于字符串<strong>不可变</strong>，所以使用字符串的方法并不会改变原来的字符串，而是产生新的字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 转大写</span><br>su = s.upper()<br><br><span class="hljs-comment"># 转小写</span><br>sl = s.lower()<br><br><span class="hljs-comment"># replace用法，生成新的字符串，原字符串不变</span><br>s = <span class="hljs-string">&quot;Python好玩真好玩&quot;</span><br>new_s = s.replace(<span class="hljs-string">&quot;好玩&quot;</span>, <span class="hljs-string">&quot;有趣&quot;</span>)<br><span class="hljs-built_in">print</span>(s)      <span class="hljs-comment"># 结果还是  Python好玩真好玩</span><br><span class="hljs-built_in">print</span>(new_s)  <span class="hljs-comment"># 修改后的  Python有趣真有趣</span><br><br><span class="hljs-comment"># split用法，原字符串不变，生成一个新列表</span><br>name = <span class="hljs-string">&quot;Python-Java-C++&quot;</span><br>name_list = name.split(<span class="hljs-string">&#x27;-&#x27;</span>)<br><span class="hljs-built_in">print</span>(name)        <span class="hljs-comment"># Python-Java-C++</span><br><span class="hljs-built_in">print</span>(name_list)   <span class="hljs-comment"># [&#x27;Python&#x27;, &#x27;Java&#x27;, &#x27;C++&#x27;]</span><br><br><span class="hljs-comment"># strip用法，去除前后指定字符串</span><br>demo = <span class="hljs-string">&quot;   hhhh  &quot;</span><br>new1 = demo.strip()       <span class="hljs-comment"># 默认去除前后空格和换行符</span><br>demo = <span class="hljs-string">&quot;1211哈哈哈21121&quot;</span><br>new2 = demo.strip(<span class="hljs-string">&quot;12&quot;</span>)   <span class="hljs-comment"># 按照单个字符，&#x27;1&#x27;和&#x27;2&#x27;都会删除</span><br><span class="hljs-built_in">print</span>(new2)    <span class="hljs-comment"># 哈哈哈</span><br></code></pre></td></tr></table></figure><p><img src="/assets/Pasted%20image%2020250831200302.png"></p><h1 id="4-序列的切片"><a href="#4-序列的切片" class="headerlink" title="4 序列的切片"></a>4 序列的切片</h1><p>序列是指：<strong>内容连续、有序，可使用下标索引</strong>的一类数据容器。<br>上述的列表、元组、字符串都是序列。序列支持切片操作，切片就是从原序列中取出一个子序列。</p><p>语法：<code>序列[起始下标:结束下标:步长]</code>（类似 <code>range</code>序列，<code>[起始,结束)</code>范围内指定步长）<br>表示从序列中，从指定位置开始，依次取出元素，到指定位置结束，得到一个新序列。</p><ul><li>起始下标表示从何处开始，可以留空，留空视作从头开始</li><li>结束下标（不含）表示何处结束，可以留空，留空视作截取到结尾</li><li>步长表示依次取元素的间隔（可以为负，反向走，起始下标也要在结束下标右边）</li></ul><p><strong>注意，此操作不会影响序列本身，而是会得到一个新的序列（列表、元组、字符串）</strong></p><h1 id="5-字典-dict"><a href="#5-字典-dict" class="headerlink" title="5 字典(dict)"></a>5 字典(dict)</h1><h2 id="5-1-字典的创建和访问"><a href="#5-1-字典的创建和访问" class="headerlink" title="5.1 字典的创建和访问"></a>5.1 字典的创建和访问</h2><p>字典使用 <code>&#123;&#125;</code>包围，存储的元素是<strong>键值对</strong> <code>key:value</code>，并且 <code>key</code>不可重复，重复会覆盖原有数据。</p><ul><li><code>key</code> 数据类型<strong>必须为不可变类型</strong>，不可为字典、列表，一般类型用：字符串、整数</li><li><code>value</code> 数据类型随意，不限制</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">d = &#123;&#125;      <span class="hljs-comment"># 空字典</span><br>d = <span class="hljs-built_in">dict</span>()  <span class="hljs-comment"># 空字典</span><br><br>d = &#123;<span class="hljs-string">&quot;zhangsan&quot;</span>:<span class="hljs-number">100</span>, <span class="hljs-string">&quot;lisi&quot;</span>:<span class="hljs-number">59</span>&#125;<br><br><span class="hljs-comment"># 集合不可用下标进行访问，但可以使用key来取得对应的value</span><br><span class="hljs-built_in">print</span>(d[<span class="hljs-string">&quot;zhangsan&quot;</span>])  <span class="hljs-comment"># 结果为100</span><br></code></pre></td></tr></table></figure><p>字典访问到不存在的 <code>key</code>会报错，可以使用 <code>in</code>或 <code>字典.get(键, 返回值)</code>来检验。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用 in 检验</span><br>d = &#123;<span class="hljs-string">&#x27;zhangsan&#x27;</span>: <span class="hljs-number">18</span>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;zhangsan&#x27;</span> <span class="hljs-keyword">in</span> d:  <span class="hljs-comment"># 相反还有 not in</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;在字典&#x27;</span>)<br><br><span class="hljs-comment"># 使用 字典.get(键, 返回值) 方法</span><br><span class="hljs-comment"># 键存在则返回值，键不存在默认返回 None，也可以指定返回值</span><br><span class="hljs-keyword">if</span> d.get(<span class="hljs-string">&#x27;lisi&#x27;</span>) <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:  <span class="hljs-comment"># d.get(&#x27;lisi&#x27;, 1) == 1 作用一样  </span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;不在字典&#x27;</span>)<br><br><span class="hljs-comment"># 可以用get()很方便地统计出现次数</span><br>s = <span class="hljs-built_in">input</span>()  <br>counter = &#123;&#125;  <br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s:  <br>    <span class="hljs-keyword">if</span> c.isalpha():  <br>        counter[c] = counter.get(c, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>  <span class="hljs-comment"># 存在返回已有值，不存在返回0</span><br></code></pre></td></tr></table></figure><blockquote><p>字典通过哈希算法计算 <code>key</code>的位置，所以字典的<strong>查找和插入操作极快</strong>。由于要保证hash的正确性，作为 <code>key</code>的对象就不能变。在Python中，字符串和整数都不可变，可以放心用作 <code>key</code>，<code>list</code>可变不能作为 <code>key</code>。</p></blockquote><h2 id="5-2-字典的遍历"><a href="#5-2-字典的遍历" class="headerlink" title="5.2 字典的遍历"></a>5.2 字典的遍历</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 迭代字典的键</span><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> d.keys():  <span class="hljs-comment"># 等同于 for i in d:</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;名字：<span class="hljs-subst">&#123;k&#125;</span> 分数：<span class="hljs-subst">&#123;d[k]&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 迭代字典的值</span><br><span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> d.values():<br><span class="hljs-built_in">print</span>(v)<br><br><span class="hljs-comment"># 迭代字典的键值对</span><br><span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> d.items():  <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;k&#125;</span>: <span class="hljs-subst">&#123;v&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="5-3-常用方法"><a href="#5-3-常用方法" class="headerlink" title="5.3 常用方法"></a>5.3 常用方法</h2><p><img src="/assets/Pasted%20image%2020250901085204.png"></p><h1 id="6-集合-set"><a href="#6-集合-set" class="headerlink" title="6 集合(set)"></a>6 集合(set)</h1><h2 id="6-1-集合的创建"><a href="#6-1-集合的创建" class="headerlink" title="6.1 集合的创建"></a>6.1 集合的创建</h2><p><code>set</code>和 <code>dict</code>类似也是一组 <code>key</code>的集合，但不存储 <code>value</code>，由于 <code>key</code>不能重复，所以在 <code>set</code>中没有重复的 <code>key</code>。集合内部是<strong>去重并且无序</strong>的，使用 <code>&#123;&#125;</code>包围。因为无序，所以集合不可用下标进行访问。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-built_in">set</span>()  <span class="hljs-comment"># 空集合，s = &#123;&#125; 不是空集合，而是空字典</span><br><br>s = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125; <br></code></pre></td></tr></table></figure><p><code>set</code>和 <code>dict</code>底层原理一样，唯一的区别仅仅在于没有存储 <code>value</code>，<code>key</code>是唯一的保证了 <code>set</code>内部不会有重复元素，由于无法判断两个可变对象是否相等，所以<strong>不能存放可变对象</strong>。</p><blockquote><p>注意与C++非常不同的是，<strong>集合不会自动排序</strong>，<code>dict</code> 和 <code>set</code> 的底层哈希表会让它看起来好像有顺序，但这不是排序，只是哈希存储的结果，顺序不稳定）</p></blockquote><h2 id="6-2-集合的运算"><a href="#6-2-集合的运算" class="headerlink" title="6.2 集合的运算"></a>6.2 集合的运算</h2><p><code>set</code>之间有很方便的取交集 <code>&amp;</code>和取并集 <code>|</code>运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br>s2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;<br><span class="hljs-built_in">print</span>(s1 &amp; s2)  <span class="hljs-comment"># 交集 &#123;1, 2&#125;</span><br><span class="hljs-built_in">print</span>(s1 | s2)  <span class="hljs-comment"># 并集 &#123;1, 2, 3, 4, 5, 6&#125;</span><br></code></pre></td></tr></table></figure><h2 id="6-3-集合的遍历"><a href="#6-3-集合的遍历" class="headerlink" title="6.3 集合的遍历"></a>6.3 集合的遍历</h2><p>由于集合不支持下标访问，所以不能使用 <code>while</code>循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br><span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><h2 id="6-4-常用操作"><a href="#6-4-常用操作" class="headerlink" title="6.4 常用操作"></a>6.4 常用操作</h2><p><img src="/assets/Pasted%20image%2020250901084030.png"></p><h1 id="7-容器对比"><a href="#7-容器对比" class="headerlink" title="7 容器对比"></a>7 容器对比</h1><p>列表、元组字符串为序列类型，集合、字典为非序列类型。</p><ul><li>是否支持下标索引<ul><li>支持：列表、元组、字符串</li><li>不支持：集合、字典</li></ul></li><li>是否支持重复元素：<ul><li>支持：列表、元组、字符串</li><li>不支持：集合、字典</li></ul></li><li>是否可以修改<ul><li>支持：列表、集合、字典</li><li>不支持：元组、字符串</li></ul></li></ul><p><img src="/assets/Pasted%20image%2020250901090126.png"></p><h1 id="8-容器通用操作"><a href="#8-容器通用操作" class="headerlink" title="8 容器通用操作"></a>8 容器通用操作</h1><p><img src="/assets/Pasted%20image%2020250901090833.png"></p><ul><li><code>sorted</code>：接收任意可迭代对象（<code>list、tuple、set、dict、str</code>等），返回一个<strong>新的列表</strong>（不修改原对象）。</li><li><code>.sort()</code>：<code>list</code>专属方法，<strong>直接在原列表上排序</strong>，不会返回新列表（返回 <code>None</code>）。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">tp = (<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>)<br>tp_ls = <span class="hljs-built_in">sorted</span>(tp)  <span class="hljs-comment"># 返回值为列表</span><br><br>ls = [<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>]<br>ls.sort()  <span class="hljs-comment"># 直接对ls本身进行排序</span><br></code></pre></td></tr></table></figure><p><code>sorted</code>有类似C++中的 <code>cmp</code>函数，可以自定义排序规则，并且支持 <code>lambda</code>匿名函数，用法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 默认以第一个元素作为依据进行排序</span><br>ls = [(<span class="hljs-string">&#x27;bob&#x27;</span>, <span class="hljs-number">70</span>), (<span class="hljs-string">&#x27;alice&#x27;</span>, <span class="hljs-number">80</span>), (<span class="hljs-string">&#x27;carl&#x27;</span>, <span class="hljs-number">100</span>)]<br>ls = <span class="hljs-built_in">sorted</span>(ls)<br><span class="hljs-built_in">print</span>(ls)  <span class="hljs-comment"># [(&#x27;alice&#x27;, 80), (&#x27;bob&#x27;, 70), (&#x27;carl&#x27;, 100)]</span><br><br><span class="hljs-comment"># x 是需要排序容器的一个元素，sorted 会把每个元素传入自定义函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cmp</span>(<span class="hljs-params">x</span>):<br><span class="hljs-keyword">return</span> x[<span class="hljs-number">1</span>]<br><br><span class="hljs-comment"># 自定义排序规则</span><br>ls = <span class="hljs-built_in">sorted</span>(ls, key=cmp)<br><span class="hljs-built_in">print</span>(ls)  <span class="hljs-comment"># [(&#x27;bob&#x27;, 70), (&#x27;alice&#x27;, 80), (&#x27;carl&#x27;, 100)]</span><br><br><span class="hljs-comment"># lambda函数＋逆序排列</span><br>ls = <span class="hljs-built_in">sorted</span>(ls, reverse=<span class="hljs-literal">True</span>, key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>])  <br><span class="hljs-built_in">print</span>(ls)  <span class="hljs-comment"># [(&#x27;carl&#x27;, 100), (&#x27;alice&#x27;, 80), (&#x27;bob&#x27;, 70)]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>03_Python文件操作</title>
    <link href="/2025/10/26/01%20Python%E5%9F%BA%E7%A1%80/03_Python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <url>/2025/10/26/01%20Python%E5%9F%BA%E7%A1%80/03_Python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="1-文件打开"><a href="#1-文件打开" class="headerlink" title="1 文件打开"></a>1 文件打开</h1><p><code>open</code>函数，可以打开已存在的文件，或创建一个新文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">open</span>(name, mode, encoding)<br></code></pre></td></tr></table></figure><ul><li><code>name</code>：文件路径</li><li><code>mode</code>：工作模式：只读、写入、追加等</li><li><code>encoding</code>：编码格式（推荐UTF-8）</li></ul><p>工作模式：</p><ul><li><code>r</code> ：只读（默认）</li><li><code>rb</code>：读取非文本文件（内部是01），否则会被默认按UTF-8编码）</li><li><code>wb</code>：写入非文本文件（01）</li><li><code>w</code> ：覆盖写入，原有内容会被删除</li><li><code>a</code> ：追加写入，在原有内容后追加</li></ul><p><img src="/assets/Pasted%20image%2020250901145332.png"></p><p>实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 由于encoding的位置不是第三个，所以要用关键字参数显式指明</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;python.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>)<br><span class="hljs-comment"># 此时f是open函数的文件对象，拥有属性和方法</span><br></code></pre></td></tr></table></figure><h1 id="2-文件关闭"><a href="#2-文件关闭" class="headerlink" title="2 文件关闭"></a>2 文件关闭</h1><p><code>close()</code>关闭文件对象，和打开文件是配套操作。如果不关闭，文件会被Python一直占用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">文件对象.close()  <span class="hljs-comment"># 同时会自动调用 文件对象.flush() </span><br></code></pre></td></tr></table></figure><h1 id="3-文件读取"><a href="#3-文件读取" class="headerlink" title="3 文件读取"></a>3 文件读取</h1><p>文件读取的前置要求是文件要先打开。</p><p><code>read()</code>方法：<br>读取文件，返回一个<strong>字符串</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">文件对象.read(num)<br><span class="hljs-comment"># num表示读取的长度（单位字节），没有传入num默认读取文件所有数据</span><br></code></pre></td></tr></table></figure><p><code>readlines()</code>方法：<br>读取整个文件，按照行进行切分，返回一个<strong>列表</strong>，每一行数据作为一个元素，末尾添加 <code>\n</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">文件对象.readlines()<br></code></pre></td></tr></table></figure><p><code>readline()</code>方法：<br>调用一次读取一行内容，返回<strong>字符串</strong>，末尾带有 <code>\n</code>。如需读取多行，需要多次调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">文件对象.readline()<br></code></pre></td></tr></table></figure><blockquote><p>读取文件有指针标记位置，使用 <code>f.seek(0)</code>回拨指针到开头。</p></blockquote><p>循环读取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 方式一</span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> 文件对象:<br>...     <span class="hljs-comment"># line是每一行的字符串</span><br><br><span class="hljs-comment"># 方式二</span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> 文件对象.readlines():<br>...     <span class="hljs-comment"># line是每一行的字符串</span><br></code></pre></td></tr></table></figure><p><code>with open</code>：<br>这是一种包含打开、操作、关闭的快捷操作方式，在 <code>with open</code>的语句块中完成文件操作，操作完成后自动关闭文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(...) <span class="hljs-keyword">as</span> 文件对象:<br>文件对象.read()<br>...<br><br><span class="hljs-comment"># 实例：</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;python.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>ls = f.readlines()<br><span class="hljs-built_in">print</span>(ls)<br></code></pre></td></tr></table></figure><h1 id="4-文件写入"><a href="#4-文件写入" class="headerlink" title="4 文件写入"></a>4 文件写入</h1><p>覆盖写入：</p><ul><li>调用 <code>write</code>时内容并未真正写入文件，而是会积攒在程序的内存中，称之为<strong>缓冲区</strong></li><li>当调用 <code>flush</code> 的时候，内容才会真正写入文件</li><li>这样做可以避免频繁的操作硬盘，导致效率下降（攒一堆，一次性写入磁盘）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1、打开文件</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;python.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br><br><span class="hljs-comment"># 2、覆盖写入</span><br>f.write(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br><br><span class="hljs-comment"># 3、内容刷新</span><br>f.flush()   <span class="hljs-comment"># 可以立即将缓冲区数据写入文件，而不是等缓冲区满或程序结束</span><br></code></pre></td></tr></table></figure><p>追加写入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1、打开文件</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;python.txt&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>)<br><br><span class="hljs-comment"># 2、追加写入</span><br>f.write(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br><br><span class="hljs-comment"># 3、内容刷新</span><br>f.flush()   <span class="hljs-comment"># 可以立即将缓冲区数据写入目的地，而不是等缓冲区满或程序结束</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>04_Python异常与模块</title>
    <link href="/2025/10/26/01%20Python%E5%9F%BA%E7%A1%80/04_Python%E5%BC%82%E5%B8%B8%E4%B8%8E%E6%A8%A1%E5%9D%97/"/>
    <url>/2025/10/26/01%20Python%E5%9F%BA%E7%A1%80/04_Python%E5%BC%82%E5%B8%B8%E4%B8%8E%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="1-异常处理"><a href="#1-异常处理" class="headerlink" title="1 异常处理"></a>1 异常处理</h1><h2 id="1-1-异常的捕获"><a href="#1-1-异常的捕获" class="headerlink" title="1.1 异常的捕获"></a>1.1 异常的捕获</h2><p>世界上没有完美的程序，程序运行都可能出现异常，出现异常有下面两种情况：</p><ol><li>整个程序因为一个BUG停止运行</li><li>对BUG进行提醒，整个程序继续运行</li></ol><p>实际开发更多是第2种情况，就需要<strong>捕获异常</strong>，它的作用在于：提前假设某处会出现异常，提前做好准备，当真的出现异常的时候，可以有后续手段，一般 <code>try</code> 下方只放一行尝试执行的代码。</p><ul><li><code>try</code>：只有在 <code>try</code> 内部的代码，才会被捕获异常</li><li><code>except</code>：匹配机制，用来匹配特定异常</li><li><code>else</code>：没有异常的时候执行</li><li><code>finally</code>：有没有异常都会执行</li></ul><p>用 <code>try</code>来运行可能出错的代码，如果执行出错，则后续代码不会继续执行，而是直接跳转至 <code>except</code>语句块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    可能有异常的代码<br><span class="hljs-keyword">except</span> 异常类型 <span class="hljs-keyword">as</span> 别名:<br>    出现异常的处理代码<br><span class="hljs-keyword">except</span> 异常类型 <span class="hljs-keyword">as</span> 别名:<br>    出现异常的处理代码<br><span class="hljs-keyword">else</span>:<br>    没有异常的处理代码<br><span class="hljs-keyword">finally</span>:<br>    有没有异常都会执行的代码<br></code></pre></td></tr></table></figure><hr><p>捕获常规异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>可能有异常的代码<br><span class="hljs-keyword">except</span>:<br>出现异常的处理代码<br></code></pre></td></tr></table></figure><p>捕获指定异常：如果异常类型和要捕获的异常类型不一致，则无法捕获异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    可能有异常的代码<br><span class="hljs-keyword">except</span> 异常类型 <span class="hljs-keyword">as</span> 变量:<br>    出现异常的处理代码<br></code></pre></td></tr></table></figure><p>捕获多个异常：在except后使用元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    可能有异常的代码<br><span class="hljs-keyword">except</span> (异常类型<span class="hljs-number">1</span>, 异常类型<span class="hljs-number">2</span>):<br>    出现异常的处理代码<br></code></pre></td></tr></table></figure><p>捕获异常并输出描述信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>可能有异常的代码<br><span class="hljs-keyword">except</span> 异常类型 <span class="hljs-keyword">as</span> e:<br>pirnt(e)<br></code></pre></td></tr></table></figure><p>捕获所有异常：<code>Exception</code> 是所有异常的父类，任何异常都可以用 <code>Exception</code> 抓住</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>可能有异常的代码<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>pirnt(e)<br></code></pre></td></tr></table></figure><p><code>except</code>不仅会捕获指定异常，还会将其子类一网打尽，常见错误类型和继承关系：<br><a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy">https://docs.python.org/3/library/exceptions.html#exception-hierarchy</a></p><h2 id="1-2-异常的记录与抛出"><a href="#1-2-异常的记录与抛出" class="headerlink" title="1.2 异常的记录与抛出"></a>1.2 异常的记录与抛出</h2><p>记录错误，使用Python内置的 <code>logging</code>模块可以很方便的记录异常信息，打印完错误信息程序还会继续正常执行。通过配置，<code>logging</code>还可以把错误记录到日志文件里，方便事后排查。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br><span class="hljs-keyword">try</span>:<br>    a = <span class="hljs-number">10</span> / <span class="hljs-number">0</span><br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    logging.exception(e)<br></code></pre></td></tr></table></figure><p>异常本质上也是一个 <code>class</code>，捕获异常就是捕获该类的一个实例。异常不是凭空产生的，而是有意创造的并抛出的。必要时我们可以定义一个异常 <code>class</code>，并选择好合适的继承关系，用 <code>raise</code>进行抛出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyError</span>(<span class="hljs-title class_ inherited__">ValueError</span>):  <br>    <span class="hljs-keyword">pass</span>  <br><br><br>a = <span class="hljs-number">10</span>  <br>b = <span class="hljs-number">0</span>  <br><span class="hljs-keyword">if</span> b == <span class="hljs-number">0</span>:  <br>    <span class="hljs-keyword">raise</span> MyError(<span class="hljs-string">&#x27;分母为0&#x27;</span>)  <br><span class="hljs-built_in">print</span>(a / b)<br></code></pre></td></tr></table></figure><h1 id="2-异常的传递"><a href="#2-异常的传递" class="headerlink" title="2  异常的传递"></a>2  异常的传递</h1><p>当函数 <code>func01</code> 中发生异常, 并且没有捕获处理这个异常的时候, 异常会传递到函数 <code>func02</code>, 当 <code>func02</code> 也没有捕获处理这个异常的时候，<code>main</code> 函数会捕获这个异常,  这就是异常的传递性。<br><strong>当所有函数都没有捕获异常的时候, 程序就会报错</strong>。</p><p><img src="/assets/Pasted%20image%2020250901212333.png"></p><blockquote><p>利用异常具有传递性的特点，当我们想要保证程序不会因为异常崩溃的时候，就可以在 <code>main</code> 函数中设置异常捕获，由于无论在整个程序哪里发生异常, 最终都会传递到 <code>main</code> 函数中，这样就可以确保所有的异常都会被捕获。</p></blockquote><h1 id="3-模块与包"><a href="#3-模块与包" class="headerlink" title="3 模块与包"></a>3 模块与包</h1><h2 id="3-1-模块基本用法"><a href="#3-1-模块基本用法" class="headerlink" title="3.1 模块基本用法"></a>3.1 模块基本用法</h2><p>模块就是一个Python文件，里面有类、函数、变量等，可以导入模块去使用，类似C++的头文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[<span class="hljs-keyword">from</span> 包|模块] <span class="hljs-keyword">import</span> 包|模块|函数|变量|类... [<span class="hljs-keyword">as</span> 别名]<br></code></pre></td></tr></table></figure><p>实例：<br>代码文件 <code>B.py</code> 中有函数：<code>B1</code> <code>B2</code> <code>B3</code>，在代码文件A中使用，可以有如下写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">## 方法一</span><br><span class="hljs-keyword">import</span> B<br>B.B1()<br>B.B2()<br><br><span class="hljs-comment"># 别名</span><br><span class="hljs-keyword">import</span> B <span class="hljs-keyword">as</span> b<br>b.B1()<br>b.B2()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">## 方法二</span><br><span class="hljs-keyword">from</span> B <span class="hljs-keyword">import</span> B1, B2<br>B1()<br>B2()<br><span class="hljs-comment"># B3没有导入，不能使用</span><br><br><span class="hljs-comment"># 导入B中所有函数，但不推荐，因为没有方法一可读性强，归属关系不清楚</span><br><span class="hljs-keyword">from</span> B <span class="hljs-keyword">import</span> *<br>B1()<br>B2()<br>B3()<br></code></pre></td></tr></table></figure><h2 id="3-2-Python内置变量"><a href="#3-2-Python内置变量" class="headerlink" title="3.2 Python内置变量"></a>3.2 Python内置变量</h2><p><code>__name__</code>变量：<br>任何一个Python代码中，都隐式附带这个变量。</p><ul><li>当这个代码文件直接执行的时候，此变量记录值是：<code>__main__</code></li><li>当这个代码文件，作为模块被其它代码文件导入的时候，此变量记录值是：<code>代码文件名本身</code></li></ul><p>基于这个特性，我们可以区分这个文件是执行了还是被导入了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    ...       <span class="hljs-comment"># 在测试的时候，可以避免其他文件导入时该文件时，都执行测试代码</span><br></code></pre></td></tr></table></figure><p><code>__all__</code>变量：<br>表示的是如果文件被 <code>from 模块 import *</code>导入，则内部的哪些函数可以被 <code>*</code>导入。<br>默认是全部导入，如果不想要全部的话，可以手动赋值此变量。示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># B3不会被其他文件导入</span><br>__all__ = [<span class="hljs-string">&quot;B1&quot;</span>, <span class="hljs-string">&quot;B2&quot;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">B1</span>():<br>    ...<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">B2</span>():<br>    ...<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">B3</span>():<br>    ...<br></code></pre></td></tr></table></figure><h2 id="3-3-包"><a href="#3-3-包" class="headerlink" title="3.3 包"></a>3.3 包</h2><p>概念：Python的包是一个特殊文件夹，这个文件夹内包含：</p><ol><li><code>__init__.py</code>的文件（用来控制模块的导入行为）</li><li>其它模块（<code>.py</code>）文件</li></ol><p>包可以帮助我们<strong>管理模块</strong>, 包的作用就是包含多个模块，但包的本质依然是模块。<br><img src="/assets/Pasted%20image%2020250902103509.png"></p><p>实例：<br>文件夹 <code>my_package</code>内有：</p><ul><li><code>__init__.py</code>文件</li><li>有 <code>A.py</code> <code>C.py</code> 模块文件</li><li>有 <code>B.py</code> 模块文件，这个模块内提供 <code>B1</code> <code>B2</code> <code>B3</code> 三个函数</li></ul><p>方式一：不受 <code>__init__.py</code>控制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 不推荐，不好写</span><br><span class="hljs-keyword">import</span> my_package.B<br>my_package.B.B1()<br>my_package.B.B2()<br></code></pre></td></tr></table></figure><p>方式二：受到 <code>__init__.py</code>控制<br>在 <code>__init__.py</code> 文件内写上：<code>__all__ = [&quot;A&quot;, &quot;B&quot;]</code> ，则可以使用A和B两个模块，无法用C这个模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 推荐</span><br><span class="hljs-keyword">from</span> my_package <span class="hljs-keyword">import</span> B<br>B.B1()<br>B.B2()<br><br><span class="hljs-comment"># 不推荐，可读性差</span><br><span class="hljs-keyword">from</span> my_package <span class="hljs-keyword">import</span> *<br>B.B1()<br>B.B2()<br><br><span class="hljs-comment"># 推荐</span><br><span class="hljs-keyword">from</span> my_package.B <span class="hljs-keyword">import</span> B1<br>B1()    <span class="hljs-comment"># 无法使用B2和B3</span><br><br><span class="hljs-comment"># 不推荐，可读性差</span><br><span class="hljs-keyword">from</span> my_package.B <span class="hljs-keyword">import</span> *<br>B1()<br>B2()<br></code></pre></td></tr></table></figure><h2 id="3-4-安装第三方包"><a href="#3-4-安装第三方包" class="headerlink" title="3.4 安装第三方包"></a>3.4 安装第三方包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install 包名称<br></code></pre></td></tr></table></figure><p>如果网络不好可以用清华镜像，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple 包名称<br></code></pre></td></tr></table></figure><p>在Pycharm直接安装<br><img src="/assets/Pasted%20image%2020250902110216.png"></p><h2 id="3-5-Anaconda"><a href="#3-5-Anaconda" class="headerlink" title="3.5 Anaconda"></a>3.5 Anaconda</h2><p>Anaconda内置了非常多的第三方库，可以用来管理Python模块。<br>默认情况下，Python解释器会搜索当前目录、所有已安装的内置模块和第三方模块，搜索路径存放在 <code>sys</code>模块的 <code>path</code>变量中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br>sys.path<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[&#x27;D:\\Develop\\@DevCode\\PyProject\\Python学习\\试学班&#x27;, </span><br><span class="hljs-string">&#x27;D:\\Develop\\@DevCode\\PyProject\\Python学习&#x27;, </span><br><span class="hljs-string">&#x27;D:\\PyCharm 2023.2.3\\plugins\\python\\helpers\\pycharm_display&#x27;, </span><br><span class="hljs-string">&#x27;D:\\Develop\\Anaconda\\envs\\my_project_env\\python310.zip&#x27;, </span><br><span class="hljs-string">&#x27;D:\\Develop\\Anaconda\\envs\\my_project_env\\DLLs&#x27;, </span><br><span class="hljs-string">&#x27;D:\\Develop\\Anaconda\\envs\\my_project_env\\lib&#x27;, </span><br><span class="hljs-string">&#x27;D:\\Develop\\Anaconda\\envs\\my_project_env&#x27;, </span><br><span class="hljs-string">&#x27;D:\\Develop\\Anaconda\\envs\\my_project_env\\lib\\site-packages&#x27;, </span><br><span class="hljs-string">&#x27;D:\\PyCharm 2023.2.3\\plugins\\python\\helpers\\pycharm_matplotlib_backend&#x27;]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>可以设置环境变量 <code>PYTHONPATH</code>，该环境变量的内容会被自动添加到模块搜索路径中。</p>]]></content>
    
    
    <categories>
      
      <category>Python语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
